name: Appointment Service CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: godfrey10/appointment-service
  SONAR_PROJECT_KEY: godfrey10_appointment-service  # Format: username_repo-name

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for SonarCloud

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test --no-daemon

      - name: Run Unit Tests
        run: ./gradlew test --no-daemon

      - name: Generate Test Report
        if: always()
        run: ./gradlew jacocoTestReport --no-daemon

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/test-results/test/

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: build/reports/jacoco/test/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: appointment-service-jar
          path: build/libs/*.jar
          retention-days: 7

  # Job 2: SonarCloud Analysis
  sonarcloud-analysis:
    name: SonarCloud Code Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build and analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed for PR decoration
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew build sonar \
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=https://sonarcloud.io \
            --no-daemon

  # Job 3: Security Scan
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 4: Build and Push Docker Image
  build-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test, sonarcloud-analysis]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Docker Image Digest
        run: echo "Image pushed with tags ${{ steps.meta.outputs.tags }}"

  # Job 5: Deploy (Optional)
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: build-docker-image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy Notification
        run: |
          echo "üöÄ Ready to deploy!"
          echo "Image: ${{ env.DOCKER_IMAGE }}:latest"
          echo "Add your deployment commands here"

  # Job 6: Notification
  notify:
    name: Pipeline Status
    runs-on: ubuntu-latest
    needs: [build-and-test, sonarcloud-analysis, security-scan, build-docker-image]
    if: always()

    steps:
      - name: Check Pipeline Status
        run: |
          if [[ "${{ needs.build-docker-image.result }}" == "success" ]]; then
            echo "‚úÖ Pipeline completed successfully!"
            echo "üê≥ Docker image: ${{ env.DOCKER_IMAGE }}:latest"
            echo "üìä SonarCloud: https://sonarcloud.io/dashboard?id=${{ env.SONAR_PROJECT_KEY }}"
          else
            echo "‚ùå Pipeline failed!"
            echo "Check the logs for details"
            exit 1
          fi